dashboard. html 


{% load static %}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <title>Student Table</title>
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/ag-grid-community/styles/ag-grid.css" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/ag-grid-community/styles/ag-theme-alpine.css" />
    <link rel="stylesheet" href="{% static 'css/dashboard.css' %}">
    <style>
        body {
            margin: 0;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            background-color: #f4f4f4;
        }

        .add-btn {
            padding: 15px 30px;
            background-color: #1976d2;
            color: white;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 1.2em;
        }

        .add-btn:hover {
            background-color: #1565c0;
        }

        #content-wrapper {
            display: none;
            flex-direction: column;
            align-items: stretch;
            width: 90%;
            max-width: 960px;
            margin-top: 20px;
        }

        #table-section {
            background-color: white;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            margin-bottom: 20px;
            padding: 20px;
            width: 100%;
            box-sizing: border-box;
        }

        #student-table {
            width: 100%;
            border-collapse: collapse;
        }

        #student-table th,
        #student-table td {
            padding: 10px;
            border: 1px solid #ddd;
            text-align: left;
        }

        #student-table th {
            background-color: #f0f0f0;
        }

        input.clean-input, select.clean-input {
            padding: 8px;
            border: 1px solid #ccc;
            border-radius: 4px;
            outline: none;
            width: calc(100% - 16px);
            box-sizing: border-box;
        }

        .add-row-btn, .save-btn, .cancel-btn {
            margin: 5px;
            padding: 8px 14px;
            background-color: #1976d2;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }

        .add-row-btn:hover, .save-btn:hover, .cancel-btn:hover {
            background-color: #1565c0;
        }

        #button-container {
            margin-top: 10px;
            text-align: right;
        }

        #filteredGrid {
            width: 100%;
            margin-top: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            background-color: white;
            display: none;
            padding: 10px;
            box-sizing: border-box;
        }

        #all-data-section {
            display: none;
            width: 90%;
            max-width: 960px;
            align-self: center;
            margin-top: 20px;
            flex-direction: column;
            align-items: stretch;
        }

        #all-data-section h2 {
            text-align: center;
            margin-bottom: 10px;
        }

        #all-data-grid-container {
            width: 100%;
        }

        #date-filter-container {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-bottom: 10px;
        }

    </style>
</head>
<body>
    <button class="add-btn" onclick="showAddUserContent()">Add User</button>

    <div id="content-wrapper">
        <div id="table-section">
            <h2>Add User Details</h2>
            <div id="date-filter-container">
                <span>Filter by Date:</span>
                <input type="date" class="clean-input filter-input" onchange="filterByDate(this.value)" />
            </div>
            <table id="student-table">
                <thead>
                    <tr>
                        <th>Employee Role
                            <select class="clean-input filter-select" onchange="filterByColumn(this.value, 'employeeName')">
                                <option value="">Select</option>
                                <option value="CEO">CEO</option>
                                <option value="Admin">Admin</option>
                                <option value="Manager">Manager</option>
                                <option value="TL">TL</option>
                            </select>
                        </th>
                        <th>Task Description<input type="text" class="clean-input filter-input"
                                               onkeyup="filterByColumn(this.value, 'taskDescription')" /></th>
                        <th>Planned Hours<input type="number" min="1" max="1000" class="clean-input filter-input"
                                               onkeyup="filterByColumn(this.value, 'plannedHours')" /></th>
                        <th>Actual Hours<input type="number" min="1" max="1000" class="clean-input filter-input"
                                               onkeyup="filterByColumn(this.value, 'actualHours')" /></th>
                        <th>Code Review Status
                            <select class="clean-input filter-select" onchange="filterByColumn(this.value, 'codeReviewStatus')">
                                <option value="">Select</option>
                                <option value="Done">Done</option>
                                <option value="Working">Working</option>
                                <option value="Not Yet Started">Not Yet Started</option>
                            </select>
                        </th>
                        <th>Productivity Rating<input type="number" min="1" max="10" value="0" class="clean-input filter-input"
                                               onkeyup="filterByColumn(this.value, 'productivityRatio')" /></th>
                        <th>Quality Testing<input type="number" min="1" max="10" value="0" class="clean-input filter-input"
                                               onkeyup="filterByColumn(this.value, 'qualityTesting')" /></th>
                        <th>Status<input type="text" class="clean-input filter-input"
                                               onkeyup="filterByColumn(this.value, 'status')" /></th>
                    </tr>
                </thead>
                <tbody></tbody>
            </table>

            <button class="add-row-btn" onclick="addRow()">Add Row</button>

            <div id="button-container">
                <button class="save-btn" onclick="saveData()">Save</button>
                <button class="cancel-btn" onclick="hideAddUserContent()">Cancel</button>
            </div>
        </div>

        <div id="filteredGrid" class="ag-theme-alpine" style="display: none;"></div>
    </div>

    <div id="all-data-section">
        <h2>All Saved Entries</h2>
        <div id="allDataGrid" class="ag-theme-alpine" style="height: 400px;"></div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/ag-grid-community@31.0.1/dist/ag-grid-community.min.noStyle.js"></script>

    <script>
        let filteredGridApi, allDataGridApi;
        const savedData = [];

        const columnDefs = [
            { headerName: 'Date', field: 'date', filter: 'agDateColumnFilter', filterParams: { comparator: dateComparator } },
            { headerName: 'Employee Role', field: 'employeeName', filter: 'agTextColumnFilter' },
            { headerName: 'Task Description', field: 'taskDescription', filter: 'agTextColumnFilter' },
            { headerName: 'Planned Hours', field: 'plannedHours', filter: 'agNumberColumnFilter' },
            { headerName: 'Actual Hours', field: 'actualHours', filter: 'agNumberColumnFilter' },
            { headerName: 'Code Review Status', field: 'codeReviewStatus', filter: 'agTextColumnFilter' },
            { headerName: 'Productivity Rating', field: 'productivityRatio', filter: 'agNumberColumnFilter' },
            { headerName: 'Quality Testing', field: 'qualityTesting', filter: 'agNumberColumnFilter' },
            { headerName: 'Status', field: 'status', filter: 'agTextColumnFilter' }
        ];

        function dateComparator(filterLocalDateAtMidnight, cellValue) {
            if (cellValue == null) {
                return -1;
            }
            const cellDate = new Date(cellValue);
            if (cellDate < filterLocalDateAtMidnight) {
                return -1;
            } else if (cellDate > filterLocalDateAtMidnight) {
                return 1;
            } else {
                return 0;
            }
        }

        // Initialize ag-Grid for filtered data
        new agGrid.Grid(document.querySelector('#filteredGrid'), {
            columnDefs: columnDefs,
            rowData: [],
            onGridReady: params => {
                filteredGridApi = params.api;
            },
            pagination: true
        });

        // Initialize ag-Grid for all data
        new agGrid.Grid(document.querySelector('#allDataGrid'), {
            columnDefs: columnDefs,
            rowData: savedData,
            onGridReady: params => {
                allDataGridApi = params.api;
            }
        });

        function filterByDate(date) {
            const filteredData = savedData.filter(item => item.date === date);
            filteredGridApi.setRowData(filteredData);
            document.getElementById('filteredGrid').style.display = filteredData.length > 0 ? 'block' : 'none';
        }

        function filterByColumn(value, column) {
            const filteredData = savedData.filter(item => {
                return item[column] && item[column].toString().toLowerCase().includes(value.toLowerCase());
            });
            filteredGridApi.setRowData(filteredData);
            document.getElementById('filteredGrid').style.display = filteredData.length > 0 ? 'block' : 'none';
        }

        function saveData() {
            const newData = {
                date: document.querySelector('.filter-input').value,
                employeeName: document.querySelector('.filter-select').value,
                taskDescription: document.querySelector('.filter-input').value,
                plannedHours: document.querySelector('.filter-input').value,
                actualHours: document.querySelector('.filter-input').value,
                codeReviewStatus: document.querySelector('.filter-input').value,
                productivityRatio: document.querySelector('.filter-input').value,
                qualityTesting: document.querySelector('.filter-input').value,
                status: document.querySelector('.filter-input').value
            };

            savedData.push(newData);
            allDataGridApi.setRowData(savedData);
            filterByDate(newData.date); // Update the filter display
        }

        function showAddUserContent() {
            document.getElementById('content-wrapper').style.display = 'flex';
        }

        function hideAddUserContent() {
            document.getElementById('content-wrapper').style.display = 'none';
        }

    </script>
</body>
</html>








kq-https://kqproducts.net/ems/TimeLog/formTimeLog











