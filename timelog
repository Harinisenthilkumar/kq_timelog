kq-https://kqproducts.net/ems/TimeLog/formTimeLog



LOGIN.HTML 
-------------
{% load static %}
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <link rel="stylesheet" href="{% static 'css/login.css' %}">
  <title>Login</title>
</head>
<body>
    <div class="background-wrapper">
      <div class="main-login-box">
        <div class="login-form-side">
          <h2>Login to your account</h2>
          <form method="POST" class="login-form" id="loginForm" action="{% url 'login' %}">
            {% csrf_token %}

            <div class="form-group">
              <label for="email">Email</label>
              <input type="text" id="email" name="username" required>
              <p class="error-message" id="emailError"></p>
            </div>

            <div class="form-group">
              <label for="password">Password</label>
              <div style="position: relative;">
                <input type="password" id="password" name="password" required>
                <img src="{% static 'images/eye-close.svg' %}" alt="Toggle Password" id="togglePassword" class="toggle-password-icon" style="cursor: pointer;">
              </div>
              <a href="#" class="forgot-password">Forgot Password?</a>
              <p class="error-message" id="passwordError"></p>
            </div>

            <button type="submit" class="login-btn" id="submitLogin">
              Login
              <img src="{% static 'image/group_26197.svg' %}" alt="Arrow Icon">
            </button>

            {% if messages %}
              <ul class="messages">
                {% for message in messages %}
                  <li{% if message.tags %} class="{{ message.tags }}"{% endif %}>{{ message }}</li>
                {% endfor %}
              </ul>
            {% endif %}
          </form>
        </div>

        <div class="login-overlay-side">
          <img src="{% static 'images/Assessment logo.png' %}" alt="Assessment Logo" class="logo-image">

          <img src="{% static 'images/Rectangle 14.png' %}" alt="Rectangle" class="rectangle-img">
        </div>
      </div>
    </div>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const passwordInput = document.getElementById('password');
      const togglePasswordIcon = document.getElementById('togglePassword');
      const eyeOpenSrc = "{% static '/images/eye.svg' %}";
      const eyeCloseSrc = "{% static '/images/eye-close.svg' %}";

      togglePasswordIcon.addEventListener('click', function() {
        const type = passwordInput.getAttribute('type') === 'password' ? 'text' : 'password';
        passwordInput.setAttribute('type', type);
        this.src = type === 'password' ? eyeCloseSrc : eyeOpenSrc;
      });
    });
  </script>
  </body>

</html>




LOGIN.CSS
-----------


body {
  margin: 0;
  overflow: hidden;
  height: 100vh;
  font-family: Calibri, sans-serif;
  background: url("/static/images/bg.jpg") no-repeat center center fixed;
  background-size: cover;
}

.background-wrapper {
  width: 100vw;
  height: 100vh;
  display: flex;
  align-items: center;
  justify-content: center;
}
/* Centered login box */
.main-login-box {
  width: 900px;
  height: 605px;
  background: #FFFFFF;
  box-shadow: 10px 30px 50px #3F27684D;
  border-radius: 30px;
  display: grid;
  grid-template-columns: 1fr 1fr;
  overflow: hidden;
}


/* Container for login form */
.login-form-side {
  flex: 1;
  padding: 60px;
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
  background-color: #fff;
}

/* Heading */
.login-form-side h2 {
  font-size: 24px;
  margin-bottom: 60px;
  color: #3F2768;
}

/* Group: Email, Password */
.form-group {
  position: relative;
  margin-bottom: 30px; /* Space between Email and Password */
}

/* Label style */
.form-group label {
  font-size: 16px;
  color: #3F2768;
  display: block;
  margin-bottom: 10px;
}

/* Input Fields */
.form-group input {
  width: 100%;
  height: 50px;
  padding: 0 45px 0 15px;
  border: 1px solid #D4CDE1;
  border-radius: 10px;
  font-size: 16px;
  box-sizing: border-box;
  background: #FFFFFF;
}


.form-group input {
  padding: 12px 40px 12px 10px;
  width: 100%;
  border: 1px solid #D4CDE1;
  border-radius: 10px;
  font-size: 16px;
  box-sizing: border-box;
  height: 50px;
}

/* Toggle Eye Icon */
.toggle-password-icon {
  position: absolute;
  right: 10px;
  top: 38px;
  width: 24px;
  height: 24px;
  cursor: pointer;
}

/* Forgot Password */
.forgot-password {
  position: absolute;
  right: 0;
  bottom: -20px;
  font-size: 14px;
  color: #3F2768;
  text-decoration: none;
}

.login-form-side label {
  display: block;
  margin-bottom: 8px;
  font-size: 16px;
  color: #333;
}

.login-form-side input {
  width: 330px;
  height: 50px;
  background: #FFFFFF;
  border: 1px solid #D4CDE1;
  border-radius: 10px;
  padding: 0 15px;
  font-size: 16px;
}

.forgot-password {
  position: absolute;
  right: 0;
  bottom: -20px;
  font-size: 14px;
  color: #3F2768;
  text-decoration: none;
}

/* Button */
.login-btn {
  width: 330px;
  height: 50px;
  background: #3F2768;
  box-shadow: 0px 10px 20px #3F27684D;
  border-radius: 10px;
  opacity: 1;
  color: white;
  font-size: 16px;
  font-weight: 600;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 10px;
  border: none;
  cursor: pointer;
  margin-top: 84px;
}
.arrow-icon {
  width: 10px;
  height: 10px;
  opacity: 1;
}



.login-overlay-side {
  flex: 1;
  background: #3F2768;
 background-image: url("../images/login-background.png");
  color: white;
  padding: 40px;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  position: relative;
  background-size: cover;
  background-position: center;

}

.logo-image {
  width: 333px;
  height: 265px;
  margin-bottom: 20px;
}


.logo-text-management {
  font-weight: 300;
  font-size: 30px;
  color: #EB8022;
  margin-bottom: 20px;
  text-align: center;
}

.rectangle-img {
  width: 238px;
  height: 46px;
}
.error-message {
  height: 20px; /* Reserve space */
  color: red;
  margin-bottom: 10px;
  text-align: center;
  font-weight: bold;
}

.error-message p {
  margin: 0;
}

  .error-message {
    color: red;
    font-size: 0.8em;
    margin-top: 5px;
  }
  .toggle-password-icon {
    position: absolute;
    top: 50%;
    right: 10px;
    transform: translateY(-50%);
    cursor: pointer;
    width: 20px;
    height: 20px;
  }
  .messages {
    list-style-type: none;
    padding: 0;
    margin-top: 10px;
    color: red;
    font-size: 0.9em;
  }







DASHBOARD.HTML 
--------------
{% extends "layouts/main.html" %}
{% load static %}
{% load component_tags %}
{% block style %}


<link rel="stylesheet" href="{% static 'css/dashboard.css' %}">
{% endblock %}
{% block content %}
<section class="form-main-container" style="display: flex; width: 100%;">
  {% component 'sidebar' %}{% endcomponent %}
  <div class="outer-div">
    <div id="table-section" style="display: none; flex-grow: 1;">
      <h2>Add Log Details</h2>
      <table id="student-table">
        <thead>
          <tr>
            <th>Date</th>
            <th>Employee Name</th>
            <th>Task Description</th>
            <th>Planned Hours</th>
            <th>Actual Hours</th>
            <th>Code Review Status</th>
            <th>Productivity Rating</th>
            <th>Quality Rating</th>
            <th>Status</th>
          </tr>
        </thead>
        <tbody></tbody>
      </table>
      <button class="add-row-btn" onclick="addRow()">+ Add Row</button>

     
    </div>

    <div id="all-data-section">
      <h2>All User Details</h2>
      <div id="filter-and-add-container">
        <div id="date-filter-container">
          <label for="date-filter" style="font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; font-size: 16px; font-weight: bold; color: #333; margin-right: 10px;">
            Filter by Date:
          </label>
          
          <input type="date" id="date-filter" class="clean-input" onchange="filterByDate(this.value)" style="padding: 8px; border: 2px solid #ccc; border-radius: 4px; outline: none; box-sizing: border-box; font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; font-size: 14px; color:#121212;">
        </div><br>

        <div class="add-btn-container">
          <h3>Filtered Details for Selected Date</h3>
          <button class="add-btn" onclick="showTable()">Add Log</button>
          
        </div>
      
      </div>

      <div id="allDataGrid" class="ag-theme-alpine" style="height: 400px;"></div>

      <div id="filtered-data-section">
        <table id="filtered-table" border="1" style="width: 100%; border-collapse: collapse;">
          <thead>
            <tr>
              <th>Date</th>
              <th>Employee Name</th>
              <th>Task Description</th>
              <th>Planned Hours</th>
              <th>Actual Hours</th>
              <th>Code Review Status</th>
              <th>Productivity Rating</th>
              <th>Quality Rating </th>
              <th>Status</th>
            </tr>
          </thead>
          <tbody></tbody>
        </table>
      </div>
    </div>
    <div id="button-container">
      
      <button class="cancel-btn" onclick="hideTable()">Cancel</button>
      <button class="save-btn" onclick="moveToAllData()">Save</button>
    </div>
  </div>
</section>
{% endblock %}
{% block script %}
<script src="https://cdn.jsdelivr.net/npm/ag-grid-community@31.0.1/dist/ag-grid-community.min.noStyle.js"></script>
<script>
  let allDataGridApi;
  let savedData = localStorage.getItem('logData') ? JSON.parse(localStorage.getItem('logData')) : [];

  const columnDefs = [{
      headerName: 'Date',
      field: 'date',
      filter: 'agDateColumnFilter',
      filterParams: {
        comparator: dateComparator
      },
      sortable: true,
      resizable: true
    },
    {
      headerName: 'Employee Name',
      field: 'employeeName',
      sortable: true,
      resizable: true
    },
    {
      headerName: 'Task Description',
      field: 'taskDescription',
      sortable: true,
      resizable: true
    },
    {
      headerName: 'Planned Hours',
      field: 'plannedHours',
      sortable: true,
      resizable: true,
      valueFormatter: formatTime
    },
    {
      headerName: 'Actual Hours',
      field: 'actualHours',
      sortable: true,
      resizable: true,
      valueFormatter: formatTime
    },
    {
      headerName: 'Code Review Status',
      field: 'codeReviewStatus',
      sortable: true,
      resizable: true
    },
    {
      headerName: 'Productivity Rating',
      field: 'productivityRatio',
      sortable: true,
      resizable: true
    },
    {
      headerName: 'Quality Testing',
      field: 'qualityTesting',
      sortable: true,
      resizable: true
    },
    {
      headerName: 'Status',
      field: 'status',
      sortable: true,
      resizable: true
    }
  ];

  function dateComparator(filterLocalDateAtMidnight, cellValue) {
    if (!cellValue) return -1;
    const cellDate = new Date(cellValue);
    cellDate.setHours(0, 0, 0, 0);
    if (cellDate < filterLocalDateAtMidnight) return -1;
    if (cellDate > filterLocalDateAtMidnight) return 1;
    return 0;
  }

  function formatTime(params) {
    const value = params.value;
    if (!value) return '';
    const hours = Math.floor(value / 60);
    const minutes = value % 60;
    return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;
  }

  const gridOptions = {
    columnDefs: columnDefs,
    rowData: savedData,
    onGridReady: params => {
      allDataGridApi = params.api;
      setDefaultDateFilter();
    },
    pagination: true,
    paginationPageSize: 10,
    domLayout: 'normal'
  };

  document.addEventListener('DOMContentLoaded', () => {
    new agGrid.Grid(document.querySelector('#allDataGrid'), gridOptions);
    showAllDataSection();
    updateFilteredTable(getCurrentDate());
  });

  // Set the default date filter to today's date
  function setDefaultDateFilter() {
    const today = getCurrentDate();
    document.getElementById("date-filter").value = today;
    updateFilteredTable(today);
  }

  // Get today's date in yyyy-mm-dd format
  function getCurrentDate() {
    const today = new Date();
    const dd = String(today.getDate()).padStart(2, '0');
    const mm = String(today.getMonth() + 1).padStart(2, '0');
    const yyyy = today.getFullYear();
    return yyyy + '-' + mm + '-' + dd;
  }

  function showTable() {
    document.getElementById('table-section').style.display = 'block';
    document.getElementById('all-data-section').style.display = 'none';
    addRow();
  }

  function hideTable() {
    document.getElementById('table-section').style.display = 'none';
    document.getElementById('all-data-section').style.display = 'block';
  }

  function showAllDataSection() {
    document.getElementById('table-section').style.display = 'none';
    document.getElementById('all-data-section').style.display = 'block';
  }

  function addRow() {
    const tableBody = document.querySelector('#student-table tbody');
    const row = document.createElement('tr');
    row.innerHTML = `
      <td><input type="date" class="clean-input" value="${getCurrentDate()}" /></td>
      <td>
        <select class="clean-input">
          <option value="">Select</option>
          <option value="ThamaraiSelvan">ThamariSelvan</option>
          <option value="GuruMoorthi">GuruMoorthi</option>
          <option value="Naveen">Naveen</option>
          <option value="Kesavan">Kesavan</option>
        </select>
      </td>
      <td><input type="text" class="clean-input" /></td>
      <td><input type="time" class="clean-input" value="00:00" step="300" /></td>
      <td><input type="time" class="clean-input" value="00:00" step="300" /></td>
      <td>
        <select class="clean-input">
          <option value="">Select</option>
          <option value="Done">Done</option>
          <option value="Working">Working</option>
          <option value="Not Yet Started">Not Yet Started</option>
        </select>
      </td>
      <td><input type="number" min="1" max="10" value="0" class="clean-input" /></td>
      <td><input type="number" min="1" max="10" value="0" class="clean-input" /></td>
      <td><input type="text" class="clean-input" /></td>
    `;
    tableBody.appendChild(row);
  }
  function saveDataToLocalStorage() {
    const table = document.getElementById("student-table");
    const newData = [];
  
    for (let i = 1; i < table.rows.length; i++) {
      const row = table.rows[i];
      const plannedTime = row.cells[3].querySelector('input').value.split(':');
      const actualTime = row.cells[4].querySelector('input').value.split(':');
  
      newData.push({
        date: row.cells[0].querySelector('input').value,
        employeeName: row.cells[1].querySelector('select').value,
        taskDescription: row.cells[2].querySelector('input').value,
        plannedHours: (parseInt(plannedTime[0]) * 60) + parseInt(plannedTime[1]),
        actualHours: (parseInt(actualTime[0]) * 60) + parseInt(actualTime[1]),
        codeReviewStatus: row.cells[5].querySelector('select').value,
        productivityRatio: row.cells[6].querySelector('input').value,
        qualityTesting: row.cells[7].querySelector('input').value,
        status: row.cells[8].querySelector('input').value
      });
    }
  
    savedData = [...savedData, ...newData];
    localStorage.setItem('logData', JSON.stringify(savedData));
  }
  

  function convertTimeToMinutes(time) {
    const [hours, minutes] = time.split(':').map(Number);
    return (hours * 60) + minutes;
  }

  function filterByDate(date) {
    updateFilteredTable(date);
  }

  function updateFilteredTable(date) {
    const filteredData = savedData.filter(item => item.date === date);
    const tableBody = document.querySelector('#filtered-table tbody');
    tableBody.innerHTML = '';
  
    filteredData.forEach(item => {
      const row = document.createElement('tr');
      row.innerHTML = `
        <td>${item.date}</td>
        <td>${item.employeeName}</td>
        <td>${item.taskDescription}</td>
        <td>${formatTime({ value: item.plannedHours })}</td>
        <td>${formatTime({ value: item.actualHours })}</td>
        <td>${item.codeReviewStatus}</td>
        <td>${item.productivityRatio}</td>
        <td>${item.qualityTesting}</td>
        <td>${item.status}</td>
      `;
      tableBody.appendChild(row);
    });
  }
  

  function moveToAllData() {
    saveDataToLocalStorage();  // Save new entries
    allDataGridApi.setRowData(savedData);  // Refresh AG Grid
    updateFilteredTable(getCurrentDate());  // Refresh filtered table
    hideTable();  // Go back to list view
  }
</script>
{% endblock %}




DASHBOARD.CSS
---------------
* {
  margin: 0;
  padding: 0;
}

body {
  font-family: sans-serif !important;
}

.main-div {
  margin: 0;
  padding: 0;
  width: 100%
}


.sidebar {
  width: 15%;
  height: 100vh;
  background: #3F2768;
  text-align: center;
  overflow: hidden;
}

.menu-items img {
  width: 40px;
  height: 40px;
  padding: 0 10px;

}

.menu-items {
  display: flex;
  justify-content: start;
  align-items: center;
  padding: 0 20px;
  width: 100%;
  height: 80px;
  letter-spacing: 0;
  color: #FFFFFF;
  opacity: 1;
  cursor: pointer;
}

.menu-items:hover{
  background-color: rgba(0, 0, 0, 0.3);
}


#initial-add-container {
  display: flex;
  justify-content: center;
  margin-top: 100px; /* Adjust as needed to center vertically */
  margin-bottom: 40px; /* Add some space below the initial button */
  width: 90%;
}

#initial-add-btn {
  width: 140px;
  padding: 15px 30px;
  background-color: #3F2768;
  color: white;
  border: none;
  border-radius: 8px;
  cursor: pointer;
  font-size: 1.2em;
}

#initial-add-btn:hover {
  background-color: #58358c;
}


.add-btn-container {
  width: 100%;                      
  display: flex;                    
  justify-content: space-between;   
  align-items: center;
  color: #3F2768;;              
  margin-bottom: 20px;              
}

.add-btn {
  padding: 10px 20px;
  background-color: #3F2768;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 1em;
}

.add-btn:hover {
  background-color: #58358c;
}

#student-table{
  width: 100%;
}

#table-section {
  width: 100%;
  height: 100%;
  background-color: white;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  margin-bottom: 20px;
  padding: 20px;
  box-sizing: border-box;
  overflow: auto;
}



#table-section h2 {
  margin-top: 0;
  margin-bottom: 15px;
  color: #333;
}


#student-table th {
  background-color: #3F2768;
  font-weight: bold;
  color: white;
}
#student-table th,
#student-table td {
  padding: 10px;
  border: 1px solid #ddd;
  text-align: left;
}

input.clean-input {
  padding: 8px;
  border: 1px solid #ccc;
  border-radius: 4px;
  outline: none;
  box-sizing: border-box;
  width: 120px;
}


select.clean-input {
  padding: 8px;
  border: 1px solid #ccc;
  border-radius: 4px;
  outline: none;
  box-sizing: border-box;
  width: 100%;
}

.add-row-btn,
.save-btn,
.cancel-btn {
  margin-right: 10px;
  padding: 10px 18px;
  background-color: #3F2768;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 1em;
  width: 150px;
  height: 50px;
  box-shadow: 0px 10px 20px #3F27684D;
  opacity: 1;
}

.cancel-btn {
  background-color: #FFFFFF;
  color: #333;
}

.add-row-btn:hover {
  background-color: #58358c;
}

.save-btn:hover {
  background-color: #58358c;
}

.cancel-btn:hover {
  background-color: whitesmoke;
}

#button-container {
  margin-top: 33px;
  margin-right: 620px;
  display: flex;
  justify-content: flex-end;
}

#allDataGrid {
  width: 90%;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  background-color: white;
  height: 400px;
  display: none;
  margin-bottom: 20px;
}

#all-data-section {
  width: 100%;
  height: 100%;
  overflow: scroll;

}
#all-data-section {
  width: 100%;
  height: 100%;
  overflow-x:hidden ;  /* Enables horizontal scroll */
  overflow-y:  auto;  /* Disables vertical scroll */
}

#student-table {
  width: 100%; /* Ensure the table takes up full width */
  min-width: 800px; /* Adjust this value to fit the content better */
  table-layout: fixed; /* Optional: this will prevent column resizing */
}


#all-data-section h2 {
  color: #3F2768;
  margin-top: 0;
  margin-bottom: 15px;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

#date-filter-container {
  margin-bottom: 10px;
}

#filtered-data-section {
  margin-top: 30px;
  width: 100%; /* Adjusted width */
}

#filtered-data-section h3 {
  margin-bottom: 15px;
  color: #333;
}

#filtered-table {

  height: 100%;
  background-color: white;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  margin-bottom: 20px;
  padding: 20px;
  box-sizing: border-box;
  overflow: auto;
}

#filtered-table th,
#filtered-table td {
  padding: 12px 15px;
  text-align: left;
  border-bottom: 1px solid #ddd;
}

#filtered-table th {
  background-color: #3F2768;
  color: white;
  font-weight: bold;
}

#filtered-table tbody tr:hover {
  background-color: #f5f5f5;
}

#filtered-table td:last-child {
  border-right: none;
}
.outer-div{
margin:10px;
width:84%;
height: 85vh;
padding:20px;
background: #FFFFFF;
box-shadow: 10px 20px 30px #3F27684D;
border: 1px solid #D4CDE1;
border-radius: 30px;
opacity: 1;
}


MODELS
--------
# models :

from django.db import models

class EmployeeLog(models.Model):
    CODE_REVIEW_CHOICES = [
        ('Done', 'Done'),
        ('Working', 'Working'),
        ('Not Yet Started', 'Not Yet Started'),
    ]

    date = models.DateField()
    employee = models.ForeignKey('UserProfile', on_delete=models.CASCADE, related_name='logs')  # team member
    task_description = models.TextField()
    planned_hours = models.PositiveIntegerField()
    actual_hours = models.PositiveIntegerField()
    code_review_status = models.CharField(max_length=50, choices=CODE_REVIEW_CHOICES)
    productivity_rating = models.PositiveIntegerField()
    quality_testing = models.PositiveIntegerField()
    status = models.CharField(max_length=100)

    def __str__(self):
        return f"{self.date} - {self.employee.userName}"


VIEWS:
-----

from django.shortcuts import render
from django.shortcuts import render, redirect
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from django.views.decorators.http import require_http_methods
import json
from .models import UserProfile, Team
# Create your views here.

def login_view(request):
    if request.method == 'POST':
        username = request.POST.get("username")
        request.session['username'] = username
        return redirect('dashboard') 
    return render(request, 'login.html')


def dashboard(request):
    username = request.session.get('username', 'Guest')
    return render(request, 'dashboard.html', {'username': username})

def home(request):
    return render(request,'form.html')
def grid_view(request):
    return render(request, 'grid.html')

@require_http_methods(["POST"])
@csrf_exempt
def create_user(request):
    try:
        data = json.loads(request.body)
        required_fields = ['username', 'email', 'mobile', 'employee_id', 'team', 'team_lead', 'is_active', 'remarks', 'is_locked']
        missing_fields = [field for field in required_fields if not data.get(field)]

        if missing_fields:
            return JsonResponse({"errors": {field: ["This field is required."] for field in missing_fields}}, status=400)

        if UserProfile.objects.filter(email=data["email"]).exists():
            return JsonResponse({"errors": {"email": ["This email is already in use."]}}, status=400)

        user = UserProfile.objects.create(
            userName=data["username"],
            email=data["email"],
            mobileNumber=data["mobile"],
            team=data["team"],
            teamLead=data["team_lead"],
            isActive=(data["is_active"].lower() == "yes"),
            isActiveRemarks=data.get("remarks", ""),
            isAccountLocked=(data["is_locked"].lower() == "yes"),
            isAccountLockedRemarks=data.get("remarks_locked", ""),
            createdBy="Thamarai"
        )

        return JsonResponse({"message": f"User '{user.userName}' created successfully."})

    except json.JSONDecodeError:
        return JsonResponse({"error": "Invalid JSON."}, status=400)
    except Exception as e:
        return JsonResponse({"error": str(e)}, status=500)

def user_data_api(request):
    users = UserProfile.objects.all().values(
        'userName', 'email', 'mobileNumber', 'team',
        'teamLead', 'isActive', 'isActiveRemarks',
        'isAccountLocked', 'isAccountLockedRemarks',
        'createdBy'
    )
    return JsonResponse(list(users), safe=False)


URLS:
------
from django.urls import path
from . import views

urlpatterns = [
    path('', views.login_view, name='login'),
    path('dashboard/', views.dashboard, name='dashboard'),
    path('timelog/', views.home, name='home'),
    path('grid/', views.grid_view, name='grid_view'),
    path('api/users/', views.user_data_api, name='user_data_api'),
    path('create-user/', views.create_user, name='create_user'),
]
