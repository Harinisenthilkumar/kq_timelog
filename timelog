kq-https://kqproducts.net/ems/TimeLog/formTimeLog



LOGIN.HTML 
-------------
{% load static %}
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <link rel="stylesheet" href="{% static 'css/login.css' %}">
  <title>Login</title>
</head>
<body>
    <div class="background-wrapper">
      <div class="main-login-box">
        <div class="login-form-side">
          <h2>Login to your account</h2>
          <form method="POST" class="login-form" id="loginForm" action="{% url 'login' %}">
            {% csrf_token %}

            <div class="form-group">
              <label for="email">Email</label>
              <input type="text" id="email" name="username" required>
              <p class="error-message" id="emailError"></p>
            </div>

            <div class="form-group">
              <label for="password">Password</label>
              <div style="position: relative;">
                <input type="password" id="password" name="password" required>
                <img src="{% static 'images/eye-close.svg' %}" alt="Toggle Password" id="togglePassword" class="toggle-password-icon" style="cursor: pointer;">
              </div>
              <a href="#" class="forgot-password">Forgot Password?</a>
              <p class="error-message" id="passwordError"></p>
            </div>

            <button type="submit" class="login-btn" id="submitLogin">
              Login
              <img src="{% static 'image/group_26197.svg' %}" alt="Arrow Icon">
            </button>

            {% if messages %}
              <ul class="messages">
                {% for message in messages %}
                  <li{% if message.tags %} class="{{ message.tags }}"{% endif %}>{{ message }}</li>
                {% endfor %}
              </ul>
            {% endif %}
          </form>
        </div>

        <div class="login-overlay-side">
          <img src="{% static 'images/Assessment logo.png' %}" alt="Assessment Logo" class="logo-image">

          <img src="{% static 'images/Rectangle 14.png' %}" alt="Rectangle" class="rectangle-img">
        </div>
      </div>
    </div>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const passwordInput = document.getElementById('password');
      const togglePasswordIcon = document.getElementById('togglePassword');
      const eyeOpenSrc = "{% static '/images/eye.svg' %}";
      const eyeCloseSrc = "{% static '/images/eye-close.svg' %}";

      togglePasswordIcon.addEventListener('click', function() {
        const type = passwordInput.getAttribute('type') === 'password' ? 'text' : 'password';
        passwordInput.setAttribute('type', type);
        this.src = type === 'password' ? eyeCloseSrc : eyeOpenSrc;
      });
    });
  </script>
  </body>

</html>




LOGIN.CSS
-----------


body {
  margin: 0;
  overflow: hidden;
  height: 100vh;
  font-family: Calibri, sans-serif;
  background: url("/static/images/bg.jpg") no-repeat center center fixed;
  background-size: cover;
}

.background-wrapper {
  width: 100vw;
  height: 100vh;
  display: flex;
  align-items: center;
  justify-content: center;
}
/* Centered login box */
.main-login-box {
  width: 900px;
  height: 605px;
  background: #FFFFFF;
  box-shadow: 10px 30px 50px #3F27684D;
  border-radius: 30px;
  display: grid;
  grid-template-columns: 1fr 1fr;
  overflow: hidden;
}


/* Container for login form */
.login-form-side {
  flex: 1;
  padding: 60px;
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
  background-color: #fff;
}

/* Heading */
.login-form-side h2 {
  font-size: 24px;
  margin-bottom: 60px;
  color: #3F2768;
}

/* Group: Email, Password */
.form-group {
  position: relative;
  margin-bottom: 30px; /* Space between Email and Password */
}

/* Label style */
.form-group label {
  font-size: 16px;
  color: #3F2768;
  display: block;
  margin-bottom: 10px;
}

/* Input Fields */
.form-group input {
  width: 100%;
  height: 50px;
  padding: 0 45px 0 15px;
  border: 1px solid #D4CDE1;
  border-radius: 10px;
  font-size: 16px;
  box-sizing: border-box;
  background: #FFFFFF;
}


.form-group input {
  padding: 12px 40px 12px 10px;
  width: 100%;
  border: 1px solid #D4CDE1;
  border-radius: 10px;
  font-size: 16px;
  box-sizing: border-box;
  height: 50px;
}

/* Toggle Eye Icon */
.toggle-password-icon {
  position: absolute;
  right: 10px;
  top: 38px;
  width: 24px;
  height: 24px;
  cursor: pointer;
}

/* Forgot Password */
.forgot-password {
  position: absolute;
  right: 0;
  bottom: -20px;
  font-size: 14px;
  color: #3F2768;
  text-decoration: none;
}

.login-form-side label {
  display: block;
  margin-bottom: 8px;
  font-size: 16px;
  color: #333;
}

.login-form-side input {
  width: 330px;
  height: 50px;
  background: #FFFFFF;
  border: 1px solid #D4CDE1;
  border-radius: 10px;
  padding: 0 15px;
  font-size: 16px;
}

.forgot-password {
  position: absolute;
  right: 0;
  bottom: -20px;
  font-size: 14px;
  color: #3F2768;
  text-decoration: none;
}

/* Button */
.login-btn {
  width: 330px;
  height: 50px;
  background: #3F2768;
  box-shadow: 0px 10px 20px #3F27684D;
  border-radius: 10px;
  opacity: 1;
  color: white;
  font-size: 16px;
  font-weight: 600;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 10px;
  border: none;
  cursor: pointer;
  margin-top: 84px;
}
.arrow-icon {
  width: 10px;
  height: 10px;
  opacity: 1;
}



.login-overlay-side {
  flex: 1;
  background: #3F2768;
 background-image: url("../images/login-background.png");
  color: white;
  padding: 40px;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  position: relative;
  background-size: cover;
  background-position: center;

}

.logo-image {
  width: 333px;
  height: 265px;
  margin-bottom: 20px;
}


.logo-text-management {
  font-weight: 300;
  font-size: 30px;
  color: #EB8022;
  margin-bottom: 20px;
  text-align: center;
}

.rectangle-img {
  width: 238px;
  height: 46px;
}
.error-message {
  height: 20px; /* Reserve space */
  color: red;
  margin-bottom: 10px;
  text-align: center;
  font-weight: bold;
}

.error-message p {
  margin: 0;
}

  .error-message {
    color: red;
    font-size: 0.8em;
    margin-top: 5px;
  }
  .toggle-password-icon {
    position: absolute;
    top: 50%;
    right: 10px;
    transform: translateY(-50%);
    cursor: pointer;
    width: 20px;
    height: 20px;
  }
  .messages {
    list-style-type: none;
    padding: 0;
    margin-top: 10px;
    color: red;
    font-size: 0.9em;
  }







DASHBOARD.HTML 
--------------

{% extends "layouts/main.html" %}
{% load static %}
{% load component_tags %}
{% block style %}
<link rel="stylesheet" href="{% static 'css/dashboard.css' %}">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" integrity="sha512-DTOQO9RWCH3ppGqcWaEA1BIZOC6xxalwEsw9c2QQeAIftl+Vegovlnee1c9QX4TctnWMn13TZye+giMm8e2LwA==" crossorigin="anonymous" referrerpolicy="no-referrer" />
<style>
  .action-icons {
    display: flex;
    align-items: center;
    gap: 8px;
  }

  .action-icons a {
    color: #555;
    text-decoration: none;
  }

  .action-icons a:hover {
    color: #007bff;
  }

  .ag-cell-content {
    display: flex;
    align-items: center;
    height: 100%;
  }
</style>
{% endblock %}
{% block content %}
<section class="form-main-container" style="display: flex; width: 100%;">
  {% component 'sidebar' %}{% endcomponent %}
  <div class="outer-div">
    <div id="table-section" style="display: none; flex-grow: 1;">
      <h2>Add Log Details</h2>
      <form id="add-log-form">
        <table id="student-table">
          <thead>
            <tr>
              <th>Date</th>
              <th>Employee Name</th>
              <th>Task Description</th>
              <th>Planned Hours</th>
              <th>Actual Hours</th>
              <th>Code Review Status</th>
              <th>Productivity Rating</th>
              <th>Quality Rating</th>
              <th>Status</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td><input type="date" class="clean-input" name="date" value="{{ current_date }}"></td>
              <td>
                <select class="clean-input" name="employeeName">
                  <option value="">Select</option>
                  {% for user in user_profiles %}
                  <option value="{{ user.userName }}">{{ user.userName }}</option>
                  {% endfor %}
                </select>
              </td>
              <td><input type="text" class="clean-input" name="taskDescription" /></td>
              <td><input type="time" class="clean-input" name="plannedHours" value="00:00" step="300" /></td>
              <td><input type="time" class="clean-input" name="actualHours" value="00:00" step="300" /></td>
              <td>
                <select class="clean-input" name="codeReviewStatus">
                  <option value="">Select</option>
                  <option value="Done">Done</option>
                  <option value="Working">Working</option>
                  <option value="Not Yet Started">Not Yet Started</option>
                </select>
              </td>
              <td><input type="number" min="1" max="10" value="0" class="clean-input" name="productivityRating" /></td>
              <td><input type="number" min="1" max="10" value="0" class="clean-input" name="qualityRating" /></td>
              <td><input type="text" class="clean-input" name="status" /></td>
            </tr>
          </tbody>
        </table>
        <button type="button" class="add-row-btn" onclick="addRow()">+ Add Row</button>
      </form>
    </div>

    <div id="all-data-section">
      <h2>All User Details</h2>
      <div id="filter-and-add-container">
        <div id="date-filter-container">
          <label for="date-filter" style="font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; font-size: 16px; font-weight: bold; color: #333; margin-right: 10px;">
            Filter by Date:
          </label>
          <input type="date" id="date-filter" class="clean-input" onchange="filterByDate(this.value)" style="padding: 8px; border: 2px solid #ccc; border-radius: 4px; outline: none; box-sizing: border-box; font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; font-size: 14px; color:#121212;">
        </div><br>

        <div class="add-btn-container">
          <h3>Filtered Details for Selected Date</h3>
          <button class="add-btn" onclick="showTable()">Add Log</button>
        </div>
      </div>

      <div id="allDataGrid" class="ag-theme-alpine" style="height: 400px;"></div>

      <div id="filtered-data-section">
        <table id="filtered-table" border="1" style="width: 100%; border-collapse: collapse;">
          <thead>
            <tr>
              <th>Actions</th>
              <th>Date</th>
              <th>Employee Name</th>
              <th>Task Description</th>
              <th>Planned Hours</th>
              <th>Actual Hours</th>
              <th>Code Review Status</th>
              <th>Productivity Rating</th>
              <th>Quality Rating</th>
              <th>Status</th>
            </tr>
          </thead>
          <tbody id="filtered-table-body">
            {% for log in all_logs %}
            <tr>
              <td class="action-icons">
                <a href="{% url 'edit_log' log.logId %}"><i class="fa-solid fa-pen-to-square"></i></a>
                <a href="{% url 'delete_log' log.logId %}" onclick="return confirm('Are you sure you want to delete this log entry?')"><i class="fa-solid fa-trash"></i></a>
              </td>
              <td>{{ log.date|date:"Y-m-d" }}</td>
              <td>{{ log.employeeName }}</td>
              <td>{{ log.taskDescription }}</td>
              <td>{{ log.plannedhours }}</td>
              <td>{{ log.actualhours }}</td>
              <td>{{ log.codeReviewStatus }}</td>
              <td>{{ log.productivityRating|default_if_none:"" }}</td>
              <td>{{ log.qualityRating|default_if_none:"" }}</td>
              <td>{{ log.status }}</td>
            </tr>
            {% empty %}
            <tr>
              <td colspan="10">No log entries yet.</td>
            </tr>
            {% endfor %}
          </tbody>
        </table>
      </div>
    </div>
    <div id="button-container" style="display: none;">
      <button class="cancel-btn" onclick="hideTable()">Cancel</button>
      <button type="button" class="save-btn" onclick="saveLogs()">Save</button>
    </div>
  </div>
  {% component 'logout' %} {% endcomponent %}
</section>
{% endblock %}
{% block script %}
<script src="https://cdn.jsdelivr.net/npm/ag-grid-community@31.0.1/dist/ag-grid-community.min.noStyle.js"></script>
<script src="{% static 'js/dashboard.js' %}"></script>
{% endblock %}



DASHBOARD.JS:
------------




document.addEventListener('DOMContentLoaded', () => {
    // Initialize ag-Grid
    new agGrid.Grid(document.querySelector('#allDataGrid'), gridOptions);

    // Set today's date as default for the date filter input
    const today = getCurrentDate();
    console.log("Setting initial date filter input to today:", today);
    document.getElementById("date-filter").value = today;

    // Initially filter the grid by today's date
    filterByDate(today);

    // Show the main data section
    showAllDataSection();
});

let allDataGridApi;
let savedData = [];

const columnDefs = [{
    headerName: 'Actions',
    field: 'actions',
    sortable: false,
    filter: false,
    resizable: false,
    width: 100,
    cellRenderer: function(params) {
        return `<div class="action-icons">
                    <a href="/edit_log/<span class="math-inline">\{params\.data\.logId\}" class\="edit\-log"\><i class\="fa\-solid fa\-pen\-to\-square"\></i\></a\>
<a href\="/delete\_log/</span>{params.data.logId}" onclick="return confirm('Are you sure?')" class="delete-log"><i class="fa-solid fa-trash"></i></a>
                </div>`;
    },
    cellStyle: {
        display: 'flex',
        alignItems: 'center'
    }
},
{
    headerName: 'Date',
    field: 'date',
    filter: 'agDateColumnFilter',
    filterParams: {
        comparator: dateComparator
    },
    sortable: true,
    resizable: true,
    valueFormatter: formatDate,
    cellClass: 'ag-cell-content'
},
{
    headerName: 'Employee Name',
    field: 'employeeName',
    sortable: true,
    resizable: true,
    cellClass: 'ag-cell-content'
},
{
    headerName: 'Task Description',
    field: 'taskDescription',
    sortable: true,
    resizable: true,
    cellClass: 'ag-cell-content'
},
{
    headerName: 'Planned Hours',
    field: 'plannedHours',
    sortable: true,
    resizable: true,
    valueFormatter: formatTime,
    cellClass: 'ag-cell-content'
},
{
    headerName: 'Actual Hours',
    field: 'actualHours',
    sortable: true,
    resizable: true,
    valueFormatter: formatTime,
    cellClass: 'ag-cell-content'
},
{
    headerName: 'Code Review Status',
    field: 'codeReviewStatus',
    sortable: true,
    resizable: true,
    cellClass: 'ag-cell-content'
},
{
    headerName: 'Productivity Rating',
    field: 'productivityRating',
    sortable: true,
    resizable: true,
    cellClass: 'ag-cell-content'
},
{
    headerName: 'Quality Testing',
    field: 'qualityRating',
    sortable: true,
    resizable: true,
    cellClass: 'ag-cell-content'
},
{
    headerName: 'Status',
    field: 'status',
    sortable: true,
    resizable: true,
    cellClass: 'ag-cell-content'
}
];

function formatDate(params) {
    if (!params.value) return '';

    let dateStr = params.value;
    if (typeof dateStr === 'string' && dateStr.includes('T')) {
        dateStr = dateStr.split('T')[0];
    }

    try {
        const date = new Date(dateStr);
        if (isNaN(date.getTime())) return dateStr; // Return original if invalid

        const year = date.getFullYear();
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const day = String(date.getDate()).padStart(2, '0');
        return `${year}-${month}-${day}`;

    } catch (e) {
        console.error("Date formatting error:", e);
        return dateStr; // Return original if there's an error
    }
}

function dateComparator(filterLocalDateAtMidnight, cellValue) {
    if (!cellValue) return -1;

    let cellDateStr = cellValue;
    if (typeof cellValue === 'string' && cellValue.includes('T')) {
        cellDateStr = cellValue.split('T')[0];
    }

    try {
        const cellDate = new Date(cellDateStr);
        cellDate.setHours(0, 0, 0, 0);

        if (isNaN(cellDate.getTime())) return 0; // Skip comparison if invalid date

        if (cellDate < filterLocalDateAtMidnight) return -1;
        if (cellDate > filterLocalDateAtMidnight) return 1;
        return 0;
    } catch (e) {
        console.error("Date comparison error:", e);
        return 0;
    }
}

function formatTime(params) {
    const value = params.value;
    if (!value && value !== 0) return '';

    try {
        const hours = Math.floor(value / 60);
        const minutes = value % 60;
        return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;

    } catch (e) {
        console.error("Time formatting error:", e);
        return '00:00';
    }
}

const gridOptions = {
    columnDefs: columnDefs,
    rowData: [],
    onGridReady: params => {
        allDataGridApi = params.api;

        // Log that grid is ready
        console.log("AG Grid is ready, fetching logs...");

        // Fetch logs when grid is ready
        fetchLogs();
    },
    pagination: true,
    paginationPageSize: 10,
    domLayout: 'normal',
    onCellClicked: function(event) {
        // Handle clicks on edit or delete links
        if (event.column.colId === 'actions') {
            const clickedElement = event.event.target;

            const isEditIcon = clickedElement.classList.contains('fa-pen-to-square') ||
                                (clickedElement.parentElement && clickedElement.parentElement.classList.contains('edit-log'));

            const isDeleteIcon = clickedElement.classList.contains('fa-trash') ||
                                 (clickedElement.parentElement && clickedElement.parentElement.classList.contains('delete-log'));

            if (isEditIcon) {
                event.event.preventDefault();
                window.location.href = `/edit_log/${event.data.logId}`;
                console.log("Edit clicked for log ID:", event.data.logId);
            } else if (isDeleteIcon) {
                console.log("Delete clicked for log ID:", event.data.logId);
            }
        }
    },
    onRowDataUpdated: function() {
        console.log("Grid row data updated");
    }
};

function getCurrentDate() {
  const today = new Date();
  const dd = String(today.getDate()).padStart(2, '0');
  const mm = String(today.getMonth() + 1).padStart(2, '0');
  const yyyy = today.getFullYear();
  return `${yyyy}-${mm}-${dd}`;
}

function showTable() {
    document.getElementById('table-section').style.display = 'block';
    document.getElementById('all-data-section').style.display = 'none';
    document.getElementById('button-container').style.display = 'flex'; // Show the buttons

    // Add a row if the table is empty
    if (document.querySelector('#student-table tbody').children.length === 0) {
        addRow();
    }
}

function hideTable() {
    document.getElementById('table-section').style.display = 'none';
    document.getElementById('all-data-section').style.display = 'block';
    document.getElementById('button-container').style.display = 'none'; // Hide buttons
}

function showAllDataSection() {
    document.getElementById('table-section').style.display = 'none';
    document.getElementById('all-data-section').style.display = 'block';
    document.getElementById('button-container').style.display = 'none'; // Hide buttons initially
}

// Function to add a new row
function addRow() {
    const tableBody = document.querySelector('#student-table tbody');
    const newRow = tableBody.insertRow();
    newRow.innerHTML = `
        <td><input type="date" class="clean-input" name="date" value="${getCurrentDate()}" /></td>
        <td>
            <select class="clean-input" name="employeeName">
                <option value="">Select</option>
                {% for user in user_profiles %}
                <option value="{{ user.userName }}">{{ user.userName }}</option>
                {% endfor %}
            </select>
        </td>
        <td><input type="text" class="clean-input" name="taskDescription" /></td>
        <td><input type="time" class="clean-input" name="plannedHours" value="00:00" step="300" /></td>
        <td><input type="time" class="clean-input" name="actualHours" value="00:00" step="300" /></td>
        <td>
            <select class="clean-input" name="codeReviewStatus">
                <option value="">Select</option>
                <option value="Done">Done</option>
                <option value="Working">Working</option>
                <option value="Not Yet Started">Not Yet Started</option>
            </select>
        </td>
        <td><input type="number" min="1" max="10" value="0" class="clean-input" name="productivityRating" /></td>
        <td><input type="number" min="1" max="10" value="0" class="clean-input" name="qualityRating" /></td>
        <td><input type="text" class="clean-input" name="status" /></td>
    `;
}

// Function to save logs
function saveLogs() {
    const form = document.getElementById('add-log-form');
    const formData = new FormData(form);
    const logEntries = [];
    const rows = document.querySelectorAll('#student-table tbody tr');

    rows.forEach(row => {
        const dateInput = row.querySelector('input[name="date"]');
        const employeeNameSelect = row.querySelector('select[name="employeeName"]');
        const taskDescriptionInput = row.querySelector('input[name="taskDescription"]');
        const plannedHoursInput = row.querySelector('input[name="plannedHours"]');
        const actualHoursInput = row.querySelector('input[name="actualHours"]');
        const codeReviewStatusSelect = row.querySelector('select[name="codeReviewStatus"]');
        const productivityRatingInput = row.querySelector('input[name="productivityRating"]');
        const qualityRatingInput = row.querySelector('input[name="qualityRating"]');
        const statusInput = row.querySelector('input[name="status"]');

        if (employeeNameSelect.value) {
            const plannedTimeParts = plannedHoursInput.value.split(':');
            const actualTimeParts = actualHoursInput.value.split(':');

            logEntries.push({
                date: dateInput.value,
                employeeName: employeeNameSelect.value,
                taskDescription: taskDescriptionInput.value,
                plannedHours: (parseInt(plannedTimeParts[0]) * 60) + parseInt(plannedTimeParts[1]),
                actualHours: (parseInt(actualTimeParts[0]) * 60) + parseInt(actualTimeParts[1]),
                codeReviewStatus: codeReviewStatusSelect.value,
                productivityRating: productivityRatingInput.value ? parseInt(productivityRatingInput.value) : null,
                qualityRating: qualityRatingInput.value ? parseInt(qualityRatingInput.value) : null,
                status: statusInput.value,
            });
        }
    });

    if (logEntries.length === 0) {
        alert('Please fill in at least one row with employee data.');
        return;
    }

    fetch('/save_logs/', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'X-CSRFToken': '{{ csrf_token }}',
        },
        body: JSON.stringify({
            logs: logEntries
        }),
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            alert('Logs saved successfully!');
            hideTable();
            fetchLogs(); // Reload data and update grid
        } else {
            alert('Failed to save logs. ' + data.message);
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('An error occurred while saving.');
    });
}

// Function to filter by date
function filterByDate(date) {
    console.log("Filtering by date:", date);

    if (date) {
        console.log("Filtering ag-Grid to specific date:", date);
        if (allDataGridApi) {
            const dateFilterComponent = allDataGridApi.getFilterInstance('date');
            if (dateFilterComponent) {
                try {
                    // Create a Date object from the input value
                    const selectedDate = new Date(date);
                    selectedDate.setHours(0, 0, 0, 0); // Ensure time is at midnight for comparison

                    dateFilterComponent.setModel({
                        type: 'equals',
                        dateFrom: selectedDate,
                        dateTo: null // Ensure no 'to' date is set for equals filter
                    });

                    allDataGridApi.onFilterChanged();
                } catch (error) {
                    console.error("Error applying date filter:", error);
                }
            } else {
                console.log("Date filter component not found in ag-Grid.");
            }
        }

        // Update the filtered data table
        filterDataByDate(date);
    } else {
        // Default to current date if no date is specified
        const today = getCurrentDate();
        console.log("No date specified, defaulting to today:", today);

        // Apply the default date filter input
        document.getElementById("date-filter").value = today;
        filterByDate(today); // Apply the filter for today
    }
}

// Function to fetch all logs
function fetchLogs() {
    fetch('/get_logs/')
        .then(response => {
            if (!response.ok) {
                throw new Error(`HTTP error! Status: ${response.status}`);
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                processAndDisplayLogs(data.logs);

                // Apply today's date as default filter after loading data
                const today = getCurrentDate();
                console.log("Setting default date filter to today after fetch:", today);
                document.getElementById("date-filter").value = today;
                filterByDate(today); // Apply the filter for today after data is loaded
            } else {
                console.error("Failed to fetch logs:", data.message);
                alert("Failed to fetch logs: " + data.message);
            }
        })
        .catch(error => {
            console.error('Error fetching logs:', error);
            alert("Error fetching logs: " + error.message);
        });
}


function processAndDisplayLogs(logs) {
  // Process logs from the API response
  const formattedLogs = logs.map(log => {
    // Handle Django serialized format (with model, pk, fields structure)
    if (log.model && log.pk && log.fields) {
      // Extract data from the fields property
      const fields = log.fields;
      
      // Convert time values to minutes
      let plannedHours = 0;
      let actualHours = 0;
      
      if (fields.plannedHours) {
        plannedHours = parseInt(fields.plannedHours);
      }
      
      if (fields.actualHours) {
        actualHours = parseInt(fields.actualHours);
      }
      
      // Format the date
      let formattedDate = fields.date;
      if (typeof fields.date === 'string' && fields.date.includes('T')) {
        formattedDate = fields.date.split('T')[0]; // Extract just the date part
      }
      
      // Create a properly structured object
      return {
        logId: log.pk,
        date: formattedDate,
        employeeName: fields.employeeName || '',
        taskDescription: fields.taskDescription || '',
        plannedHours: plannedHours,
        actualHours: actualHours,
        codeReviewStatus: fields.codeReviewStatus || '',
        productivityRating: fields.productivityRating || '',
        qualityRating: fields.qualityRating || '',
        status: fields.status || '',
        planned_hours_display: formatTimeString(plannedHours),
        actual_hours_display: formatTimeString(actualHours)
      };
    } else {
      // If data is already in the expected format
      const plannedHours = parseInt(log.plannedHours) || 0;
      const actualHours = parseInt(log.actualHours) || 0;
      
      // Format the date
      let formattedDate = log.date;
      if (typeof log.date === 'string' && log.date.includes('T')) {
        formattedDate = log.date.split('T')[0];
      }
      
      return {
        ...log,
        date: formattedDate,
        plannedHours: plannedHours,
        actualHours: actualHours,
        planned_hours_display: formatTimeString(plannedHours),
        actual_hours_display: formatTimeString(actualHours)
      };
    }
  });
  
  // Log processed data for debugging
  console.log("Processed data:", formattedLogs);
  
  // Store the data for filtering
  savedData = formattedLogs;
  
  // Update the ag-Grid
  if (allDataGridApi) {
    allDataGridApi.setRowData(formattedLogs);
  }
}

// Filter data by specific date and update the UI
function filterDataByDate(date) {
  console.log("filterDataByDate called with date:", date);
  
  if (!savedData || savedData.length === 0) {
    console.log("No data available for filtering");
    const tableBody = document.querySelector('#filtered-table tbody');
    tableBody.innerHTML = '<tr><td colspan="10">No data available.</td></tr>';
    return;
  }
  
  // Filter data for the specific date
  const filteredData = savedData.filter(item => {
    // Normalize both dates to YYYY-MM-DD format for comparison
    const itemDate = typeof item.date === 'string' ? item.date.split('T')[0] : item.date;
    const result = itemDate === date;
    return result;
  });
 console.log(`Found ${filteredData.length} records for date ${date}`); 
  
  // Update the filtered table
  const tableBody = document.querySelector('#filtered-table tbody');
  tableBody.innerHTML = '';

  if (filteredData.length === 0) {
    const row = document.createElement('tr');
    row.innerHTML = `<td colspan="10">No data available </td>`;
    tableBody.appendChild(row);
    return;
  }

  // Create table rows for each filtered item
  filteredData.forEach(item => {
    const row = document.createElement('tr');
    row.innerHTML = `
      <td class="action-icons">
        <a href="/edit_log/${item.logId}"><i class="fa-solid fa-pen-to-square"></i></a>
        <a href="/delete_log/${item.logId}" onclick="return confirm('Are you sure you want to delete this log entry?')"><i class="fa-solid fa-trash"></i></a>
      </td>
      <td>${item.date || ''}</td>
      <td>${item.employeeName || ''}</td>
      <td>${item.taskDescription || ''}</td>
      <td>${item.planned_hours_display || '0:00'}</td>
      <td>${item.actual_hours_display || '0:00'}</td>
      <td>${item.codeReviewStatus || ''}</td>
      <td>${item.productivityRating || ''}</td>
      <td>${item.qualityRating || ''}</td>
      <td>${item.status || ''}</td>
    `;
    tableBody.appendChild(row);
  });
  
  console.log("Filtered table updated with date:", date);
}

// Helper function to format time
function formatTimeString(minutes) {
  if (minutes === undefined || minutes === null) return '00:00';
  
  const hours = Math.floor(minutes / 60);
  const mins = minutes % 60;
  return `${hours}:${mins < 10 ? '0' : ''}${mins}`;
}









DASHBOARD.CSS
---------------
* {
  margin: 0;
  padding: 0;
}

body {
  font-family: sans-serif !important;
}

.main-div {
  margin: 0;
  padding: 0;
  width: 100%
}


.sidebar {
  width: 15%;
  height: 100vh;
  background: #3F2768;
  text-align: center;
  overflow: hidden;
}

.menu-items img {
  width: 40px;
  height: 40px;
  padding: 0 10px;

}

.menu-items {
  display: flex;
  justify-content: start;
  align-items: center;
  padding: 0 20px;
  width: 100%;
  height: 80px;
  letter-spacing: 0;
  color: #FFFFFF;
  opacity: 1;
  cursor: pointer;
}

.menu-items:hover{
  background-color: rgba(0, 0, 0, 0.3);
}


#initial-add-container {
  display: flex;
  justify-content: center;
  margin-top: 100px; /* Adjust as needed to center vertically */
  margin-bottom: 40px; /* Add some space below the initial button */
  width: 90%;
}

#initial-add-btn {
  width: 140px;
  padding: 15px 30px;
  background-color: #3F2768;
  color: white;
  border: none;
  border-radius: 8px;
  cursor: pointer;
  font-size: 1.2em;
}

#initial-add-btn:hover {
  background-color: #58358c;
}


.add-btn-container {
  width: 100%;                      
  display: flex;                    
  justify-content: space-between;   
  align-items: center;
  color: #3F2768;;              
  margin-bottom: 20px;              
}

.add-btn {
  padding: 10px 20px;
  background-color: #3F2768;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 1em;
}

.add-btn:hover {
  background-color: #58358c;
}

#student-table{
  width: 100%;
}

#table-section {
  width: 100%;
  height: 100%;
  background-color: white;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  margin-bottom: 20px;
  padding: 20px;
  box-sizing: border-box;
  overflow: auto;
}



#table-section h2 {
  margin-top: 0;
  margin-bottom: 15px;
  color: #333;
}


#student-table th {
  background-color: #3F2768;
  font-weight: bold;
  color: white;
}
#student-table th,
#student-table td {
  padding: 10px;
  border: 1px solid #ddd;
  text-align: left;
}

input.clean-input {
  padding: 8px;
  border: 1px solid #ccc;
  border-radius: 4px;
  outline: none;
  box-sizing: border-box;
  width: 120px;
}


select.clean-input {
  padding: 8px;
  border: 1px solid #ccc;
  border-radius: 4px;
  outline: none;
  box-sizing: border-box;
  width: 100%;
}

.add-row-btn,
.save-btn,
.cancel-btn {
  margin-right: 10px;
  padding: 10px 18px;
  background-color: #3F2768;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 1em;
  width: 150px;
  height: 50px;
  box-shadow: 0px 10px 20px #3F27684D;
  opacity: 1;
}

.cancel-btn {
  background-color: #FFFFFF;
  color: #333;
}

.add-row-btn:hover {
  background-color: #58358c;
}

.save-btn:hover {
  background-color: #58358c;
}

.cancel-btn:hover {
  background-color: whitesmoke;
}

#button-container {
  margin-top: 33px;
  margin-right: 620px;
  display: flex;
  justify-content: flex-end;
}

#allDataGrid {
  width: 90%;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  background-color: white;
  height: 400px;
  display: none;
  margin-bottom: 20px;
}

#all-data-section {
  width: 100%;
  height: 100%;
  overflow: scroll;

}
#all-data-section {
  width: 100%;
  height: 100%;
  overflow-x:hidden ;  /* Enables horizontal scroll */
  overflow-y:  auto;  /* Disables vertical scroll */
}

#student-table {
  width: 100%; /* Ensure the table takes up full width */
  min-width: 800px; /* Adjust this value to fit the content better */
  table-layout: fixed; /* Optional: this will prevent column resizing */
}


#all-data-section h2 {
  color: #3F2768;
  margin-top: 0;
  margin-bottom: 15px;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

#date-filter-container {
  margin-bottom: 10px;
}

#filtered-data-section {
  margin-top: 30px;
  width: 100%; /* Adjusted width */
}

#filtered-data-section h3 {
  margin-bottom: 15px;
  color: #333;
}

#filtered-table {

  height: 100%;
  background-color: white;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  margin-bottom: 20px;
  padding: 20px;
  box-sizing: border-box;
  overflow: auto;
}

#filtered-table th,
#filtered-table td {
  padding: 12px 15px;
  text-align: left;
  border-bottom: 1px solid #ddd;
}

#filtered-table th {
  background-color: #3F2768;
  color: white;
  font-weight: bold;
}

#filtered-table tbody tr:hover {
  background-color: #f5f5f5;
}

#filtered-table td:last-child {
  border-right: none;
}
.outer-div{
margin:10px;
width:84%;
height: 85vh;
padding:20px;
background: #FFFFFF;
box-shadow: 10px 20px 30px #3F27684D;
border: 1px solid #D4CDE1;
border-radius: 30px;
opacity: 1;
}


MODELS
--------
# models :

from django.db import models

class EmployeeLog(models.Model):
    CODE_REVIEW_CHOICES = [
        ('Done', 'Done'),
        ('Working', 'Working'),
        ('Not Yet Started', 'Not Yet Started'),
    ]

    date = models.DateField()
    employee = models.ForeignKey('UserProfile', on_delete=models.CASCADE, related_name='logs')  # team member
    task_description = models.TextField()
    planned_hours = models.PositiveIntegerField()
    actual_hours = models.PositiveIntegerField()
    code_review_status = models.CharField(max_length=50, choices=CODE_REVIEW_CHOICES)
    productivity_rating = models.PositiveIntegerField()
    quality_testing = models.PositiveIntegerField()
    status = models.CharField(max_length=100)

    def __str__(self):
        return f"{self.date} - {self.employee.userName}"


VIEWS:
-----

from django.shortcuts import render
from django.shortcuts import render, redirect
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from django.views.decorators.http import require_http_methods
import json
from .models import UserProfile, Team
# Create your views here.

def login_view(request):
    if request.method == 'POST':
        username = request.POST.get("username")
        request.session['username'] = username
        return redirect('dashboard') 
    return render(request, 'login.html')


def dashboard(request):
    username = request.session.get('username', 'Guest')
    return render(request, 'dashboard.html', {'username': username})

def home(request):
    return render(request,'form.html')
def grid_view(request):
    return render(request, 'grid.html')

@require_http_methods(["POST"])
@csrf_exempt
def create_user(request):
    try:
        data = json.loads(request.body)
        required_fields = ['username', 'email', 'mobile', 'employee_id', 'team', 'team_lead', 'is_active', 'remarks', 'is_locked']
        missing_fields = [field for field in required_fields if not data.get(field)]

        if missing_fields:
            return JsonResponse({"errors": {field: ["This field is required."] for field in missing_fields}}, status=400)

        if UserProfile.objects.filter(email=data["email"]).exists():
            return JsonResponse({"errors": {"email": ["This email is already in use."]}}, status=400)

        user = UserProfile.objects.create(
            userName=data["username"],
            email=data["email"],
            mobileNumber=data["mobile"],
            team=data["team"],
            teamLead=data["team_lead"],
            isActive=(data["is_active"].lower() == "yes"),
            isActiveRemarks=data.get("remarks", ""),
            isAccountLocked=(data["is_locked"].lower() == "yes"),
            isAccountLockedRemarks=data.get("remarks_locked", ""),
            createdBy="Thamarai"
        )

        return JsonResponse({"message": f"User '{user.userName}' created successfully."})

    except json.JSONDecodeError:
        return JsonResponse({"error": "Invalid JSON."}, status=400)
    except Exception as e:
        return JsonResponse({"error": str(e)}, status=500)

def user_data_api(request):
    users = UserProfile.objects.all().values(
        'userName', 'email', 'mobileNumber', 'team',
        'teamLead', 'isActive', 'isActiveRemarks',
        'isAccountLocked', 'isAccountLockedRemarks',
        'createdBy'
    )
    return JsonResponse(list(users), safe=False)


URLS:
------
from django.urls import path
from . import views

urlpatterns = [
    path('', views.login_view, name='login'),
    path('dashboard/', views.dashboard, name='dashboard'),
    path('timelog/', views.home, name='home'),
    path('grid/', views.grid_view, name='grid_view'),
    path('api/users/', views.user_data_api, name='user_data_api'),
    path('create-user/', views.create_user, name='create_user'),
]
